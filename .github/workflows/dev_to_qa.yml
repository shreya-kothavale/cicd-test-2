# This is a basic workflow to help you get started with Actions

name: CI_qa

# Controls when the workflow will run
# on:
#   # Triggers the workflow on push or pull request events but only for the "qa" branch
#   push:
#     branches: [ "qa" ]
#   pull_request:
#     branches: [ "qa" ]

#   # Allows you to run this workflow manually from the Actions tab
#   workflow_dispatch:

on:
  pull_request:
    types:
      - closed
    branches: ["qa"]
    

# jobs:
#   if_merged:
#     if: github.event.pull_request.merged == true
#     runs-on: ubuntu-latest
#     steps:
#     - run: |
#         echo "The PR was merged in ${{ github.ref_name }} branch" 
#         cat manifest.lkml
      
jobs:
  date:
    runs-on: ubuntu-latest
    steps:
      # Checkout the branch
      - name: checkout
        uses: actions/checkout@v3

      - name: save current date
        run: |
          # do some operation that changes a file in the git repo
          cat > $manifest <<- EOM
          project_name: "test_tiaa_bpa_qa"
          ## test
          constant: connection_name {
            value: "tiaa_qa_looker_connection"
          }

          constant: model_name {
            value: "test_bpa_model_qa"
          }

          constant: gcp_project {
            value: "p-a0759636-qa-app-1cbe"
          }

          constant: dataset {
            value: "tiaa_qa_bpa_analytics_dataset"
          }
          EOM
          echo "$manifest" > manifest.lkml

      - name: setup git config
        run: |
          # setup the username and email. I tend to use 'GitHub Actions Bot' with no email by default
          git config user.name "GitHub Actions Bot"
          git config user.email "<>"

      - name: commit
        run: |
          # Stage the file, commit and push
          git add manifest.lkml
          git commit -m "qa manifest commit"
          git push origin qa

